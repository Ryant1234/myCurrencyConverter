{"version":3,"sources":["flipclock/js/faces/hourlycounter.js"],"names":["$","FlipClock","HourlyCounterFace","Face","extend","constructor","factory","options","base","build","excludeHours","time","t","children","$el","find","getHourCounter","length","each","i","digit","createList","createDivider","insertBefore","lists","flip","doNotAddPlayClass","autoIncrement","appendDigitToClock","obj","dividers","insertAfter","next","jQuery"],"mappings":";;AAAC,WAASA,CAAT,EAAY;;AAEZ;;;;;;;;;;;;AAYAC,WAAUC,iBAAV,GAA8BD,UAAUE,IAAV,CAAeC,MAAf,CAAsB;;AAEnD;;AAEA;;;;;;;AAOAC,eAAa,qBAASC,OAAT,EAAkBC,OAAlB,EAA2B;AACvC,QAAKC,IAAL,CAAUF,OAAV,EAAmBC,OAAnB;AACA,GAbkD;;AAenD;;;;AAIAE,SAAO,eAASC,YAAT,EAAuBC,IAAvB,EAA6B;AACnC,OAAIC,IAAI,IAAR;AACA,OAAIC,WAAW,KAAKP,OAAL,CAAaQ,GAAb,CAAiBC,IAAjB,CAAsB,IAAtB,CAAf;;AAEAJ,UAAOA,OAAOA,IAAP,GAAc,KAAKL,OAAL,CAAaK,IAAb,CAAkBK,cAAlB,EAArB;;AAEA,OAAGL,KAAKM,MAAL,GAAcJ,SAASI,MAA1B,EAAkC;AACjCjB,MAAEkB,IAAF,CAAOP,IAAP,EAAa,UAASQ,CAAT,EAAYC,KAAZ,EAAmB;AAC/BR,OAAES,UAAF,CAAaD,KAAb;AACA,KAFD;AAGA;;AAEDpB,KAAE,KAAKsB,aAAL,CAAmB,SAAnB,CAAF,EAAiCC,YAAjC,CAA8C,KAAKC,KAAL,CAAW,KAAKA,KAAL,CAAWP,MAAX,GAAoB,CAA/B,EAAkCH,GAAhF;AACAd,KAAE,KAAKsB,aAAL,CAAmB,SAAnB,CAAF,EAAiCC,YAAjC,CAA8C,KAAKC,KAAL,CAAW,KAAKA,KAAL,CAAWP,MAAX,GAAoB,CAA/B,EAAkCH,GAAhF;;AAEA,OAAG,CAACJ,YAAJ,EAAkB;AACjBV,MAAE,KAAKsB,aAAL,CAAmB,OAAnB,EAA4B,IAA5B,CAAF,EAAqCC,YAArC,CAAkD,KAAKC,KAAL,CAAW,CAAX,EAAcV,GAAhE;AACA;;AAED,QAAKN,IAAL;AACA,GAvCkD;;AAyCnD;;;;AAIAiB,QAAM,cAASd,IAAT,EAAee,iBAAf,EAAkC;AACvC,OAAG,CAACf,IAAJ,EAAU;AACTA,WAAO,KAAKL,OAAL,CAAaK,IAAb,CAAkBK,cAAlB,EAAP;AACA;;AAED,QAAKW,aAAL;;AAEA,QAAKnB,IAAL,CAAUG,IAAV,EAAgBe,iBAAhB;AACA,GArDkD;;AAuDnD;;;;AAIAE,sBAAoB,4BAASC,GAAT,EAAc;AACjC,QAAKrB,IAAL,CAAUqB,GAAV;;AAEA,QAAKC,QAAL,CAAc,CAAd,EAAiBC,WAAjB,CAA6B,KAAKD,QAAL,CAAc,CAAd,EAAiBE,IAAjB,EAA7B;AACA;;AA/DkD,EAAtB,CAA9B;AAmEA,CAjFA,EAiFCC,MAjFD,CAAD","file":"flipclock/js/faces/hourlycounter.js","sourcesContent":["(function($) {\n\t\t\t\n\t/**\n\t * Hourly Counter Clock Face\n\t *\n\t * This class will generate an hourly counter for FlipClock.js. An\n\t * hour counter will track hours, minutes, and seconds. If number of\n\t * available digits is exceeded in the count, a new digit will be \n\t * created.\n\t *\n\t * @param  object  The parent FlipClock.Factory object\n\t * @param  object  An object of properties to override the default\t\n\t */\n\t \n\tFlipClock.HourlyCounterFace = FlipClock.Face.extend({\n\t\t\t\n\t\t// clearExcessDigits: true,\n\n\t\t/**\n\t\t * Constructor\n\t\t *\n\t\t * @param  object  The parent FlipClock.Factory object\n\t\t * @param  object  An object of properties to override the default\t\n\t\t */\n\t\t \n\t\tconstructor: function(factory, options) {\n\t\t\tthis.base(factory, options);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Build the clock face\n\t\t */\n\t\t\n\t\tbuild: function(excludeHours, time) {\n\t\t\tvar t = this;\n\t\t\tvar children = this.factory.$el.find('ul');\n\t\t\t\n\t\t\ttime = time ? time : this.factory.time.getHourCounter();\n\t\t\t\n\t\t\tif(time.length > children.length) {\n\t\t\t\t$.each(time, function(i, digit) {\n\t\t\t\t\tt.createList(digit);\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t$(this.createDivider('Seconds')).insertBefore(this.lists[this.lists.length - 2].$el);\n\t\t\t$(this.createDivider('Minutes')).insertBefore(this.lists[this.lists.length - 4].$el);\n\t\t\t\n\t\t\tif(!excludeHours) {\n\t\t\t\t$(this.createDivider('Hours', true)).insertBefore(this.lists[0].$el);\n\t\t\t}\n\t\t\t\n\t\t\tthis.base();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Flip the clock face\n\t\t */\n\t\t \n\t\tflip: function(time, doNotAddPlayClass) {\n\t\t\tif(!time) {\n\t\t\t\ttime = this.factory.time.getHourCounter();\n\t\t\t}\t\n\n\t\t\tthis.autoIncrement();\n\t\t\n\t\t\tthis.base(time, doNotAddPlayClass);\n\t\t},\n\n\t\t/**\n\t\t * Append a newly created list to the clock\n\t\t */\n\n\t\tappendDigitToClock: function(obj) {\n\t\t\tthis.base(obj);\n\n\t\t\tthis.dividers[0].insertAfter(this.dividers[0].next());\n\t\t}\n\t\t\n\t});\n\t\n}(jQuery));"],"sourceRoot":"/source/"}