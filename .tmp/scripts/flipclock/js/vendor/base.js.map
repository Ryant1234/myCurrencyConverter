{"version":3,"sources":["flipclock/js/vendor/base.js"],"names":["Base","extend","_instance","_static","prototype","_prototyping","proto","call","base","constructor","klass","_constructing","apply","arguments","ancestor","forEach","implement","toString","valueOf","type","init","source","value","length","test","method","previous","returnValue","toSource","hidden","i","key","Object","version","object","block","context","undefined","String"],"mappings":"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","file":"flipclock/js/vendor/base.js","sourcesContent":["/*\n\tBase.js, version 1.1a\n\tCopyright 2006-2010, Dean Edwards\n\tLicense: http://www.opensource.org/licenses/mit-license.php\n*/\n\nvar Base = function() {\n\t// dummy\n};\n\nBase.extend = function(_instance, _static) { // subclass\n\t\n\t\"use strict\";\n\t\n\tvar extend = Base.prototype.extend;\n\t\n\t// build the prototype\n\tBase._prototyping = true;\n\t\n\tvar proto = new this();\n\t\n\textend.call(proto, _instance);\n\t\n\tproto.base = function() {\n\t// call this method from any other method to invoke that method's ancestor\n\t};\n\n\tdelete Base._prototyping;\n\t\n\t// create the wrapper for the constructor function\n\t//var constructor = proto.constructor.valueOf(); //-dean\n\tvar constructor = proto.constructor;\n\tvar klass = proto.constructor = function() {\n\t\tif (!Base._prototyping) {\n\t\t\tif (this._constructing || this.constructor == klass) { // instantiation\n\t\t\t\tthis._constructing = true;\n\t\t\t\tconstructor.apply(this, arguments);\n\t\t\t\tdelete this._constructing;\n\t\t\t} else if (arguments[0] !== null) { // casting\n\t\t\t\treturn (arguments[0].extend || extend).call(arguments[0], proto);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t// build the class interface\n\tklass.ancestor = this;\n\tklass.extend = this.extend;\n\tklass.forEach = this.forEach;\n\tklass.implement = this.implement;\n\tklass.prototype = proto;\n\tklass.toString = this.toString;\n\tklass.valueOf = function(type) {\n\t\t//return (type == \"object\") ? klass : constructor; //-dean\n\t\treturn (type == \"object\") ? klass : constructor.valueOf();\n\t};\n\textend.call(klass, _static);\n\t// class initialisation\n\tif (typeof klass.init == \"function\") klass.init();\n\treturn klass;\n};\n\nBase.prototype = {\t\n\textend: function(source, value) {\n\t\tif (arguments.length > 1) { // extending with a name/value pair\n\t\t\tvar ancestor = this[source];\n\t\t\tif (ancestor && (typeof value == \"function\") && // overriding a method?\n\t\t\t\t// the valueOf() comparison is to avoid circular references\n\t\t\t\t(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&\n\t\t\t\t/\\bbase\\b/.test(value)) {\n\t\t\t\t// get the underlying method\n\t\t\t\tvar method = value.valueOf();\n\t\t\t\t// override\n\t\t\t\tvalue = function() {\n\t\t\t\t\tvar previous = this.base || Base.prototype.base;\n\t\t\t\t\tthis.base = ancestor;\n\t\t\t\t\tvar returnValue = method.apply(this, arguments);\n\t\t\t\t\tthis.base = previous;\n\t\t\t\t\treturn returnValue;\n\t\t\t\t};\n\t\t\t\t// point to the underlying method\n\t\t\t\tvalue.valueOf = function(type) {\n\t\t\t\t\treturn (type == \"object\") ? value : method;\n\t\t\t\t};\n\t\t\t\tvalue.toString = Base.toString;\n\t\t\t}\n\t\t\tthis[source] = value;\n\t\t} else if (source) { // extending with an object literal\n\t\t\tvar extend = Base.prototype.extend;\n\t\t\t// if this object has a customised extend method then use it\n\t\t\tif (!Base._prototyping && typeof this != \"function\") {\n\t\t\t\textend = this.extend || extend;\n\t\t\t}\n\t\t\tvar proto = {toSource: null};\n\t\t\t// do the \"toString\" and other methods manually\n\t\t\tvar hidden = [\"constructor\", \"toString\", \"valueOf\"];\n\t\t\t// if we are prototyping then include the constructor\n\t\t\tvar i = Base._prototyping ? 0 : 1;\n\t\t\twhile (key = hidden[i++]) {\n\t\t\t\tif (source[key] != proto[key]) {\n\t\t\t\t\textend.call(this, key, source[key]);\n\n\t\t\t\t}\n\t\t\t}\n\t\t\t// copy each of the source object's properties to this object\n\t\t\tfor (var key in source) {\n\t\t\t\tif (!proto[key]) extend.call(this, key, source[key]);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n};\n\n// initialise\nBase = Base.extend({\n\tconstructor: function() {\n\t\tthis.extend(arguments[0]);\n\t}\n}, {\n\tancestor: Object,\n\tversion: \"1.1\",\n\t\n\tforEach: function(object, block, context) {\n\t\tfor (var key in object) {\n\t\t\tif (this.prototype[key] === undefined) {\n\t\t\t\tblock.call(context, object[key], key, object);\n\t\t\t}\n\t\t}\n\t},\n\t\t\n\timplement: function() {\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tif (typeof arguments[i] == \"function\") {\n\t\t\t\t// if it's a function, call it\n\t\t\t\targuments[i](this.prototype);\n\t\t\t} else {\n\t\t\t\t// add the interface using the extend method\n\t\t\t\tthis.prototype.extend(arguments[i]);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t},\n\t\n\ttoString: function() {\n\t\treturn String(this.valueOf());\n\t}\n});"],"sourceRoot":"/source/"}